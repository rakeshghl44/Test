package dqp.qa.pages;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import dqp.qa.base.TestBase;

public class CreateProfilingMeasurePage extends TestBase{
	
	LoginPage loginpage;
	
	@FindBy(xpath = "//span[@class='h3 font-weight-bold']")
	WebElement dqplogo;
	
	@FindBy(xpath = "//a[contains(text(),'Measures')]")
	WebElement measureTab;
	
	@FindBy(xpath = "//button[@routerlink='../create']//*[@data-icon='plus']")
	WebElement createbutton;
	
	@FindBy(xpath = "//*[@class='card-title mb-0' and contains(text(),'PROFILING')]")
	WebElement selectmeasure;
	
	@FindBy(name = "prName")
	WebElement measurename;
	
	@FindBy(name = "org")
	WebElement organization;

	@FindBy(xpath = "//button[contains(text(),' Next ')]")
	WebElement nextbutton;
	
	@FindBy(xpath = "//input[@placeholder='Source name']")
	WebElement addSourcename;
	
	@FindBy(xpath = "//fa-icon[starts-with(@class,'bg-success')]//*[@data-icon='check']")
	WebElement checkBoxClick;
	
	@FindBy(xpath = "//*[contains(text(),'Select Datasource')]//parent::div//following-sibling::span//i//*[@data-icon='down']")
	WebElement datasource;

	@FindBy(xpath = "//li[contains(text(),'DEV-MYSQL')]")
	WebElement selectSource;

	@FindBy(xpath = "//*[contains(text(),'Select Database')]//parent::div//following-sibling::span//i//*[@data-icon='down']")
	WebElement database;

	@FindBy(xpath = "//li[contains(text(),'Spark_Test')]")
	WebElement selectDatabase;

	@FindBy(xpath = "//*[contains(text(),'Table')]//parent::div//following-sibling::span//i//*[@data-icon='down']")
	WebElement table;

	@FindBy(xpath = "//li[contains(text(),' lte_msisdn_leakage_daily_part_day')]")
	WebElement selectTable;
	
	@FindBy(xpath = "//button[contains(text(),'Add Columns')]")
	WebElement addSourceColumns;
		
	@FindBy(xpath = "//span[@title='lte_duration']//parent::div//parent::datatable-body-cell//parent::div//datatable-body-cell//label//input[@type='checkbox']")
	WebElement selectColumn;
	
	@FindBy(xpath = "//div[@class='btn btn-enq-base']")
	WebElement addSelectbutton;
	
	
	@FindBy(xpath = "//button[contains(text(),'Next')]")
	WebElement sourcenextbutton;
	

	@FindBy(xpath = "//span[contains(text(),'Lte_duration') ]//parent::div//following-sibling::div//div[contains(text(),'Select Rule')]")
	WebElement selectRule;
	
	 @FindBy(xpath = "//*[contains(text(),' Total Count')]") 
	 WebElement	selectTotalCount;
	
	@FindBy(xpath = "//button//fa-icon//*[@data-icon='plus-circle']")
	WebElement selectPlusIcon;
	
	@FindBy(xpath = "//button[contains(text(),'Next')]")
	WebElement nextButton;
	/*
	 * @FindBy(xpath = "li[contains(text(),'Total Count')]") WebElement
	 * selectTotalCount;
	 */	
	
	@FindBy(xpath = "//button[contains(text(),'Submit')]")
	WebElement submitbutton;
	
	@FindBy(xpath = "//button[contains(text(),'No')]")
	WebElement successfulPopup;
	
	
	public CreateProfilingMeasurePage() {
		PageFactory.initElements(driver, this);
	}
	
	public boolean validateDQPLogo() {
		return dqplogo.isDisplayed();
	}	
	public void validateMeasureTab() throws InterruptedException {
		measureTab.click();
		Thread.sleep(10000);
	}	
	
	public void validateCreateMeasure() throws InterruptedException {
		createbutton.click(); 
		Thread.sleep(2000); }
	
	public void validateMesureType() throws InterruptedException {
		selectmeasure.click(); 
		Thread.sleep(2000); }
	
	public void validateMesureName() throws InterruptedException {
		measurename.sendKeys("Test_Profiling_27-10"); 
		Thread.sleep(4000); }
	
	public void validateOrganization() throws InterruptedException {
		organization.sendKeys("Test_Profiling_27-10");
		Thread.sleep(4000); }
	
	public void validateNextButton() throws InterruptedException {
		nextbutton.click(); 
		Thread.sleep(2000); }
	
	public void addSourceName() throws InterruptedException {
		addSourcename.sendKeys("qa"); 
		Thread.sleep(2000); }
	
	public void clickCheckButton() throws InterruptedException {
		checkBoxClick.click(); 
		Thread.sleep(2000); }	
	
	public void validateDatasource() throws InterruptedException {
		datasource.click(); 
		Thread.sleep(2000); }

	public void validateSelectsource() throws InterruptedException {
		selectSource.click(); 
		Thread.sleep(2000); }

	public void validateDatabase() throws InterruptedException {
		database.click(); 
		Thread.sleep(2000); }

	public void validateSelectdatabase() throws InterruptedException {
		selectDatabase.click(); 
		Thread.sleep(2000); }

	public void validateTable() throws InterruptedException {
		table.click(); 
		Thread.sleep(2000); }

	public void validateSelecttable() throws InterruptedException {
		selectTable.click(); 
		Thread.sleep(2000); }
	
	public void validateAddSourceColumn() throws InterruptedException {
		addSourceColumns.click(); 
		Thread.sleep(2000); }
	
	public void validateSelectColumn() throws InterruptedException {
		selectColumn.click(); 
		Thread.sleep(2000); }
	
	public void validateAddSelectButton() throws InterruptedException {
		addSelectbutton.click(); 
		Thread.sleep(2000); }
	

	public void validateSourceNextButton() throws InterruptedException {
		sourcenextbutton.click(); 
		Thread.sleep(2000); }

	public void validateSelectRule() throws InterruptedException {
		selectRule.click(); 
		Thread.sleep(2000); }
	
	public void validateTotalCountValue() throws InterruptedException {
		selectTotalCount.click(); 
		
		/*
		 * String searchText = "AppraisersGroupTest"; WebElement dropdown =
		 * driver.findElement(By.id("grdAvailableGroups")); dropdown.click(); //
		 * assuming you have to click the "dropdown" to open it List<WebElement> options
		 * = dropdown.findElements(By.tagName("li")); for (WebElement option : options)
		 * { if (option.getText().equals(searchText)) { option.click(); // click the
		 * desired option break; }}
		 */
		
		
		Thread.sleep(2000); }
		
	public void validateSelectPlusIcon() throws InterruptedException {
		selectPlusIcon.click(); 
		Thread.sleep(2000); }

	public void validateSourcenextbutton() throws InterruptedException {
		sourcenextbutton.click(); 
		Thread.sleep(2000); }

	public void validateSubmitButton() throws InterruptedException {
		submitbutton.click(); 
		Thread.sleep(2000); }

	public void validateSuccessfulPopup() throws InterruptedException {
		successfulPopup.click(); 
		Thread.sleep(2000); }
	

}
